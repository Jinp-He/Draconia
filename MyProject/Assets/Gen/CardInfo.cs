//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class CardInfo :  Bright.Config.BeanBase 
{
    public CardInfo(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        { if(!_json["Cost"].IsNumber) { throw new SerializationException(); }  Cost = _json["Cost"]; }
        { if(!_json["Rarity"].IsNumber) { throw new SerializationException(); }  Rarity = (Rarity)_json["Rarity"].AsInt; }
        { if(!_json["SkillTargetType"].IsNumber) { throw new SerializationException(); }  SkillTargetType = (SkillTarget)_json["SkillTargetType"].AsInt; }
        { if(!_json["BelongedCharacter"].IsString) { throw new SerializationException(); }  BelongedCharacter = _json["BelongedCharacter"]; }
        { var __json0 = _json["Properties"]; if(!__json0.IsArray) { throw new SerializationException(); } Properties = new System.Collections.Generic.List<EnumCardProperty>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EnumCardProperty __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (EnumCardProperty)__e0.AsInt; }  Properties.Add(__v0); }   }
        { var __json0 = _json["Tags"]; if(!__json0.IsArray) { throw new SerializationException(); } Tags = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  Tags.Add(__v0); }   }
        PostInit();
    }

    public CardInfo(int id, string Name, string Desc, int Cost, Rarity Rarity, SkillTarget SkillTargetType, string BelongedCharacter, System.Collections.Generic.List<EnumCardProperty> Properties, System.Collections.Generic.List<string> Tags ) 
    {
        this.Id = id;
        this.Name = Name;
        this.Desc = Desc;
        this.Cost = Cost;
        this.Rarity = Rarity;
        this.SkillTargetType = SkillTargetType;
        this.BelongedCharacter = BelongedCharacter;
        this.Properties = Properties;
        this.Tags = Tags;
        PostInit();
    }

    public static CardInfo DeserializeCardInfo(JSONNode _json)
    {
        return new CardInfo(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 卡牌名
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 费用
    /// </summary>
    public int Cost { get; private set; }
    /// <summary>
    /// 稀有度
    /// </summary>
    public Rarity Rarity { get; private set; }
    /// <summary>
    /// 技能对象
    /// </summary>
    public SkillTarget SkillTargetType { get; private set; }
    /// <summary>
    /// 从属英雄
    /// </summary>
    public string BelongedCharacter { get; private set; }
    public PlayerInfo BelongedCharacter_Ref { get; private set; }
    /// <summary>
    /// 特性
    /// </summary>
    public System.Collections.Generic.List<EnumCardProperty> Properties { get; private set; }
    /// <summary>
    /// 标签
    /// </summary>
    public System.Collections.Generic.List<string> Tags { get; private set; }

    public const int __ID__ = 56078334;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.BelongedCharacter_Ref = (_tables["TbPlayerInfo"] as TbPlayerInfo).GetOrDefault(BelongedCharacter);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Cost:" + Cost + ","
        + "Rarity:" + Rarity + ","
        + "SkillTargetType:" + SkillTargetType + ","
        + "BelongedCharacter:" + BelongedCharacter + ","
        + "Properties:" + Bright.Common.StringUtil.CollectionToString(Properties) + ","
        + "Tags:" + Bright.Common.StringUtil.CollectionToString(Tags) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
