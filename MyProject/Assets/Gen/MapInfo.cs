//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class MapInfo :  Bright.Config.BeanBase 
{
    public MapInfo(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { var __json0 = _json["SpecialEvents"]; if(!__json0.IsArray) { throw new SerializationException(); } SpecialEvents = new System.Collections.Generic.List<MapEvent>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { MapEvent __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = MapEvent.DeserializeMapEvent(__e0);  }  SpecialEvents.Add(__v0); }   }
        { var __json0 = _json["Walls"]; if(!__json0.IsArray) { throw new SerializationException(); } Walls = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { System.Collections.Generic.List<int> __v0;  { var __json1 = __e0; if(!__json1.IsArray) { throw new SerializationException(); } __v0 = new System.Collections.Generic.List<int>(__json1.Count); foreach(JSONNode __e1 in __json1.Children) { int __v1;  { if(!__e1.IsNumber) { throw new SerializationException(); }  __v1 = __e1; }  __v0.Add(__v1); }   }  Walls.Add(__v0); }   }
        { if(!_json["RestNum"].IsNumber) { throw new SerializationException(); }  RestNum = _json["RestNum"]; }
        { if(!_json["StoreNum"].IsNumber) { throw new SerializationException(); }  StoreNum = _json["StoreNum"]; }
        { if(!_json["BossId"].IsNumber) { throw new SerializationException(); }  BossId = _json["BossId"]; }
        PostInit();
    }

    public MapInfo(int id, string Name, System.Collections.Generic.List<MapEvent> SpecialEvents, System.Collections.Generic.List<System.Collections.Generic.List<int>> Walls, int RestNum, int StoreNum, int BossId ) 
    {
        this.Id = id;
        this.Name = Name;
        this.SpecialEvents = SpecialEvents;
        this.Walls = Walls;
        this.RestNum = RestNum;
        this.StoreNum = StoreNum;
        this.BossId = BossId;
        PostInit();
    }

    public static MapInfo DeserializeMapInfo(JSONNode _json)
    {
        return new MapInfo(_json);
    }

    /// <summary>
    /// 地图id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 地图名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 地图特殊事件
    /// </summary>
    public System.Collections.Generic.List<MapEvent> SpecialEvents { get; private set; }
    /// <summary>
    /// 不可通过地块
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> Walls { get; private set; }
    /// <summary>
    /// 休息处数量
    /// </summary>
    public int RestNum { get; private set; }
    /// <summary>
    /// 商店数量
    /// </summary>
    public int StoreNum { get; private set; }
    /// <summary>
    /// BossId
    /// </summary>
    public int BossId { get; private set; }

    public const int __ID__ = -1793914870;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in SpecialEvents) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in SpecialEvents) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "SpecialEvents:" + Bright.Common.StringUtil.CollectionToString(SpecialEvents) + ","
        + "Walls:" + Bright.Common.StringUtil.CollectionToString(Walls) + ","
        + "RestNum:" + RestNum + ","
        + "StoreNum:" + StoreNum + ","
        + "BossId:" + BossId + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
